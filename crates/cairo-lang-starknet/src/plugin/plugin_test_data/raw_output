//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    use array::ArrayTrait;

    #[external]
    #[raw_output]
    fn test_raw_output() -> Span::<felt252> {
        ArrayTrait::new().span()
    }

    #[external]
    #[raw_output]
    fn test_raw_output_with_spaces() -> Span     ::   < felt252  > {
        ArrayTrait::new().span()
    }
}

//! > generated_cairo_code
mod TestContract {
    use starknet::SyscallResultTrait;
    use starknet::SyscallResultTraitImpl;

    use array::ArrayTrait;

    #[external]
    #[raw_output]
    fn test_raw_output() -> Span::<felt252> {
        ArrayTrait::new().span()
    }

    #[external]
    #[raw_output]
    fn test_raw_output_with_spaces() -> Span     ::   < felt252  > {
        ArrayTrait::new().span()
    }

    const TEST_CLASS_HASH: felt252 = 1595346637997809727776061868410989672215034814070995454976363664880494301941;
    

    

    trait __abi {
        #[external]
        fn test_raw_output() -> Span::<felt252>;
        #[external]
        fn test_raw_output_with_spaces() -> Span     ::   < felt252  >;
        
        
    }

    mod __external {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }

    mod __l1_handler {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }

    mod __constructor {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `raw_output` functions must get a self param.
 --> lib.cairo:7:23
    fn test_raw_output() -> Span::<felt252> {
                      ^*******************^

error: Plugin diagnostic: `raw_output` functions must get a self param.
 --> lib.cairo:13:35
    fn test_raw_output_with_spaces() -> Span     ::   < felt252  > {
                                  ^******************************^

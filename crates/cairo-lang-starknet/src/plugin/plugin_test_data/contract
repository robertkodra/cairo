//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    use starknet::class_hash::ClassHash;
    use starknet::contract_address::ContractAddress;
    use starknet::storage_access::StorageAddress;

    fn internal_func() -> felt252 {
        1
    }

    #[view]
    fn get_something(ref arg: felt252, mut num: felt252) -> felt252 {
        num += 1;
        num
    }

    #[external]
    fn set_something(ref arg: felt252, num: felt252) {}

    #[l1_handler]
    fn l1_handler_func(from_address: felt252, arg: felt252, num: felt252) {}

    #[event]
    fn awesome_event(x: felt252, data: Array::<felt252>) {}

    #[event]
    fn best_event_ever() {}


    #[external]
    fn test_serde(contract_address: ContractAddress, class_hash: ClassHash, storage_address: StorageAddress) {}
}

//! > generated_cairo_code
mod TestContract {
    use starknet::SyscallResultTrait;
    use starknet::SyscallResultTraitImpl;

    use starknet::class_hash::ClassHash;
    use starknet::contract_address::ContractAddress;
    use starknet::storage_access::StorageAddress;

    fn internal_func() -> felt252 {
        1
    }

    #[view]
    fn get_something(ref arg: felt252, mut num: felt252) -> felt252 {
        num += 1;
        num
    }

    #[external]
    fn set_something(ref arg: felt252, num: felt252) {}

    #[l1_handler]
    fn l1_handler_func(from_address: felt252, arg: felt252, num: felt252) {}


    #[external]
    fn test_serde(contract_address: ContractAddress, class_hash: ClassHash, storage_address: StorageAddress) {}

    const TEST_CLASS_HASH: felt252 = 1016129392041609125525210873549663796569076412138186574597780963676036172555;
    

    
    #[event]
    fn awesome_event(x: felt252, data: Array::<felt252>) {
        let mut __keys = array::array_new();
        array::array_append(ref __keys, 0x3f66514f0940883a8bcde801c111c08423c480e3964ca2fe8059875ffe2f185);
        let mut __data = array::array_new();
        serde::Serde::<felt252>::serialize(@x, ref __data);
        serde::Serde::<Array::<felt252>>::serialize(@data, ref __data);
        
        starknet::syscalls::emit_event_syscall(
            array::ArrayTrait::span(@__keys),
            array::ArrayTrait::span(@__data),
        ).unwrap_syscall()
    }
            
    #[event]
    fn best_event_ever() {
        let mut __keys = array::array_new();
        array::array_append(ref __keys, 0x29b3fe9ff633bec5975af85435def23fd937c48169dcbc8718cbdfb5efdd46f);
        let mut __data = array::array_new();
        
        starknet::syscalls::emit_event_syscall(
            array::ArrayTrait::span(@__keys),
            array::ArrayTrait::span(@__data),
        ).unwrap_syscall()
    }
            

    trait __abi {
        #[view]
        fn get_something(ref arg: felt252, num: felt252) -> felt252;
        #[external]
        fn set_something(ref arg: felt252, num: felt252);
        #[l1_handler]
        fn l1_handler_func(from_address: felt252, arg: felt252, num: felt252);
        #[external]
        fn test_serde(contract_address: ContractAddress, class_hash: ClassHash, storage_address: StorageAddress);
        
        #[event]
        fn awesome_event(x: felt252, data: Array::<felt252>);
        #[event]
        fn best_event_ever();
        
    }

    mod __external {
        use super::ClassHash;
        use super::ContractAddress;
        use super::StorageAddress;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }

    mod __l1_handler {
        use super::ClassHash;
        use super::ContractAddress;
        use super::StorageAddress;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }

    mod __constructor {
        use super::ClassHash;
        use super::ContractAddress;
        use super::StorageAddress;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

        
    }
}

//! > expected_diagnostics
error: Plugin diagnostic: `raw_output` functions must get a self param.
 --> lib.cairo:12:21
    fn get_something(ref arg: felt252, mut num: felt252) -> felt252 {
                    ^*********************************************^

error: Plugin diagnostic: `raw_output` functions must get a self param.
 --> lib.cairo:18:21
    fn set_something(ref arg: felt252, num: felt252) {}
                    ^******************************^

error: Plugin diagnostic: `raw_output` functions must get a self param.
 --> lib.cairo:21:23
    fn l1_handler_func(from_address: felt252, arg: felt252, num: felt252) {}
                      ^*************************************************^

error: Plugin diagnostic: `raw_output` functions must get a self param.
 --> lib.cairo:31:18
    fn test_serde(contract_address: ContractAddress, class_hash: ClassHash, storage_address: StorageAddress) {}
                 ^*****************************************************************************************^
